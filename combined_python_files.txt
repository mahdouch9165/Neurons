
# Contents of .\Classes\neuronPatch.py
import numpy as np

class NeuronPatch:
    def __init__(self, dimensions, V_initial, dt, loop):
        self.dimensions = dimensions
        self.dt = dt
        self.loop = loop
        self.V = np.full(dimensions + (loop,), V_initial, dtype=np.float64)
        self.receptors = []
        self.currents = []

    def add_receptor(self, receptor):
        self.receptors.append(receptor)

    def add_current(self, current):
        self.currents.append(current)

    def update_state(self, time_index):
        if time_index < 0 or time_index >= self.loop:
            raise IndexError("time_index out of bounds")

        total_current = np.zeros(self.dimensions)
        for current in self.currents:
            # Directly use the current without reshaping as it's already in the correct shape
            total_current += current.compute_current(self.V[..., time_index], time_index)

        # Update membrane potentials only if not the last time step
        if time_index < self.loop - 1:
            self.V[..., time_index + 1] = self.V[..., time_index] + self.dt * total_current

    def update_transmitter_release(self, time_index):
        for receptor in self.receptors:
            receptor.update_nt_release(self.V[..., time_index])



# Contents of .\Classes\simulation.py
import numpy as np
from .neuronPatch import NeuronPatch

class Simulation:
    def __init__(self, T, dt):
        self.T = T
        self.dt = dt
        self.loop_num = int(T / dt)
        self.patches = []

    def add_patch(self, patch):
        patch.dt = self.dt
        self.patches.append(patch)

    def run(self):
        for i in range(self.loop_num - 1):
            for patch in self.patches:
                patch.update_state(i)
                patch.update_transmitter_release(i)


# Contents of .\Classes\currents\current.py
import numpy as np

class Current:
    def __init__(self, e, g, dimensions, loop):
        self.e = e
        self.g = g
        self.current_matrix = np.zeros(dimensions + (loop,))  # Time dimension added
        self.loop = loop

    def compute_current(self, V_m, time_index):
        raise NotImplementedError("Subclasses should implement this method")



# Contents of .\Classes\currents\leaky.py
from .current import Current

class LeakyCurrent(Current):
    def __init__(self, e, g, dimensions, loop):
        super().__init__(e, g, dimensions, loop)

    def compute_current(self, V_m, time_index):
        # Vectorized computation of the leaky current
        self.current_matrix[..., time_index] = self.g * (self.e - V_m)
        return self.current_matrix[..., time_index]



# Contents of .\Classes\currents\potassium.py
# Contents of .\Classes\currents\potassium.py
import numpy as np
from .current import Current

class PotassiumCurrent(Current):
    def __init__(self, e, g, dimensions, loop, dt, V_initial):
        super().__init__(e, g, dimensions, loop)
        self.dt = dt
        # Initialize gating variable matrix to its steady-state value
        n_ss = self.alpha_n(V_initial) / (self.alpha_n(V_initial) + self.beta_n(V_initial))
        self.n = np.full(dimensions + (loop,), n_ss)

    def compute_current(self, V_m, time_index):
        # Check time_index bounds
        if time_index < 0 or time_index >= self.loop:
            raise IndexError("time_index out of bounds")

        # Update gating variable for the next time step, if not at the last time step
        self.n[..., time_index + 1] = self.update_gating(self.n[..., time_index], self.alpha_n, self.beta_n, V_m)

        # Compute current for the current time step
        current = self.g * (self.n[..., time_index] ** 4) * (self.e - V_m[..., time_index])
        self.current_matrix[..., time_index] = current
        return current

    def update_gating(self, gating_variable, alpha_func, beta_func, V_m):
        return gating_variable + self.dt * (alpha_func(V_m) * (1 - gating_variable) - beta_func(V_m) * gating_variable)

    @staticmethod
    def alpha_n(V):
        return (-0.032 * (V - (-55) - 15)) / (np.exp(-(V - (-55) - 15) / 5) - 1)

    @staticmethod
    def beta_n(V):
        return 0.5 * np.exp(-((V - (-55) - 10) / 40))


# Contents of .\Classes\currents\sodium.py
# Contents of .\Classes\currents\sodium.py
import numpy as np
from .current import Current

class SodiumCurrent(Current):
    def __init__(self, e, g, dimensions, loop, dt, V_initial):
        super().__init__(e, g, dimensions, loop)
        self.dt = dt
        # Initialize gating variable matrices to their steady-state values
        m_ss = self.alpha_m(V_initial) / (self.alpha_m(V_initial) + self.beta_m(V_initial))
        h_ss = self.alpha_h(V_initial) / (self.alpha_h(V_initial) + self.beta_h(V_initial))
        self.m = np.full(dimensions + (loop,), m_ss)
        self.h = np.full(dimensions + (loop,), h_ss)

    def compute_current(self, V_m, time_index):
        # Check time_index bounds
        if time_index < 0 or time_index >= self.loop - 1:
            raise IndexError("time_index out of bounds")

        # Update gating variables for the next time step
        self.m[..., time_index + 1] = self.update_gating(self.m[..., time_index], self.alpha_m, self.beta_m, V_m)
        self.h[..., time_index + 1] = self.update_gating(self.h[..., time_index], self.alpha_h, self.beta_h, V_m)

        # Compute current for the current time step
        current = self.g * (self.m[..., time_index] ** 3) * self.h[..., time_index] * (self.e - V_m)
        self.current_matrix[..., time_index] = current
        return current


    def update_gating(self, gating_variable, alpha_func, beta_func, V_m):
        return gating_variable + self.dt * (alpha_func(V_m) * (1 - gating_variable) - beta_func(V_m) * gating_variable)


    @staticmethod
    def alpha_m(V):
        return (-0.32 * (V - (-55) - 13)) / (np.exp(-(V - (-55) - 13) / 4) - 1)

    @staticmethod
    def beta_m(V):
        return (0.28 * (V - (-55) - 40)) / (np.exp((V - (-55) - 40) / 5) - 1)

    @staticmethod
    def alpha_h(V):
        return 0.128 * np.exp(-(V - (-55) - 17) / 18)

    @staticmethod
    def beta_h(V):
        return 4 / (1 + np.exp(-(V - (-55) - 40) / 5))

