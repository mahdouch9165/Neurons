
# Contents of .\Classes\neuronPatch.py
import numpy as np

class NeuronPatch:
    def __init__(self, dimensions, V_initial, dt, loop):
        self.dimensions = dimensions
        self.dt = dt
        self.loop = loop
        # Initialize a 3D array to store membrane potentials over time. 
        # The last dimension is time.
        self.V = np.full(dimensions + (loop,), V_initial, dtype=np.float64)
        self.receptors = []
        self.currents = []

    def add_receptor(self, receptor):
        self.receptors.append(receptor)

    def add_current(self, current):
        self.currents.append(current)

    def update_state(self, time_index):
        if time_index < 0 or time_index >= self.loop:
            raise IndexError("time_index out of bounds")

        total_current = np.zeros(self.dimensions)
        for current in self.currents:
            current_at_time = current.compute_current(self.V[..., time_index], time_index)
            total_current += np.reshape(current_at_time, self.dimensions)

        # Update membrane potentials only if not the last time step
        if time_index < self.loop - 1:
            self.V[..., time_index + 1] = self.V[..., time_index] + self.dt * total_current

    def update_transmitter_release(self, time_index):
        for receptor in self.receptors:
            receptor.update_nt_release(self.V[..., time_index])



# Contents of .\Classes\simulation.py
import numpy as np
from .neuronPatch import NeuronPatch

class Simulation:
    def __init__(self, T, dt):
        self.T = T
        self.dt = dt
        self.loop_num = int(T / dt)
        self.patches = []

    def add_patch(self, patch):
        patch.dt = self.dt
        self.patches.append(patch)

    def run(self):
        for i in range(self.loop_num - 1):
            for patch in self.patches:
                patch.update_state(i)
                patch.update_transmitter_release(i)


# Contents of .\Classes\currents\current.py
import numpy as np

class Current:
    def __init__(self, e, g, dimensions, loop):
        self.e = e
        self.g = g
        self.current_matrix = np.zeros(dimensions + (loop,))  # Time dimension added

    def compute_current(self, V_m, time_index):
        raise NotImplementedError("Subclasses should implement this method")



# Contents of .\Classes\currents\leaky.py
from .current import Current

class LeakyCurrent(Current):
    def __init__(self, e, g, dimensions, loop):
        # Ensure e is negative (reversal potential) and g is positive (conductance)
        super().__init__(e, g, dimensions, loop)

    def compute_current(self, V_m, time_index):
        # Correctly calculate leaky current: I_leak = g * (V_m - e)
        self.current_matrix[..., time_index] = self.g * (V_m - self.e)
        return self.current_matrix[..., time_index]


